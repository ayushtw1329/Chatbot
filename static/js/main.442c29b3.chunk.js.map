{"version":3,"sources":["images/expand.svg","components/BotMessage.jsx","components/UserMessage.jsx","images/bot-icon.svg","images/user-icon.svg","components/Messages.jsx","images/mic-icon.svg","images/default_mic.svg","api/chatService.js","components/Input.jsx","images/cart-icon.svg","components/Header.jsx","chatbot/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["BotMessage","fetchMessage","onAddtoCart","useState","isLoading","setLoading","message","setMessage","currentImage","setCurrentImage","isViewerOpen","setIsViewerOpen","menu","setMenu","useEffect","a","msg","label","arr","value","map","push","loadMessage","openImageViewer","useCallback","index","className","stringValue","onClick","length","src","alt","height","currentIndex","onClose","disableScroll","backgroundStyle","backgroundColor","closeOnClickOutside","expandIcon","UserMessage","text","Messages","messages","el","useRef","current","scrollIntoView","block","behavior","botIcon","id","ref","userIcon","handleRequest","Promise","resolve","reject","setTimeout","toLowerCase","type","isMenu","getTextFromAudio","audioString","fetch","method","cors","body","JSON","stringify","audio","audioContent","headers","res","json","data","console","log","getBotResponse","finalResponse","response","listValue","values","Input","onSend","setText","setRecordedAudio","showStopRecordingIcon","setShowStopRecordingIcon","showStartRecordingIcon","setShowStartRecordingIcon","recorderRef","recordAudio","navigator","mediaDevices","getUserMedia","video","mediaStream","RecordRTC","recorderType","StereoAudioRecorder","bufferSize","desiredSampRate","bitsPerSecond","numberOfAudioChannels","disableLogs","startRecording","blobToBase64","blob","_","reader","FileReader","onloadend","result","readAsDataURL","getAudioText","base64","splittedValue","split","output","source","onSubmit","e","preventDefault","onChange","target","placeholder","defaultMicIcon","stopRecording","audioURL","URL","createObjectURL","getBlob","activeMicIcon","Header","count","cartIcon","Chatbot","setMessages","cartCount","setCartCount","loadWelcomeMessage","onSendMessage","newMessages","concat","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAAe,MAA0B,mC,cCK1B,SAASA,EAAT,GAA+D,IAAzCC,EAAwC,EAAxCA,aAAwC,IAA1BC,mBAA0B,MAAZ,aAAY,EAC3E,EAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BF,qBAA9B,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAwCJ,mBAAS,GAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KACA,EAAwCN,oBAAS,GAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAEA,EAAwBR,qBAAxB,mBAAOS,EAAP,KAAaC,EAAb,KAEAC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEACoBd,IADpB,OACQe,EADR,OAEEX,GAAW,IAETW,GACe,mBAAdA,EAAIC,OAA4C,cAAdD,EAAIC,MAOvCV,EAAWS,IALLE,EAAM,GACZ,CAACF,EAAIG,OAAOC,KAAI,SAACD,GAAD,OAAWD,EAAIG,KAAKF,MACpCZ,EAAWS,GACXH,EAAQK,IAVZ,4CADc,uBAAC,WAAD,wBAgBdI,KACC,CAACrB,IAEJ,IAAMsB,EAAkBC,uBAAY,SAACC,GACnChB,EAAgBgB,GAChBd,GAAgB,KACf,IAOH,OACE,qBAAKe,UAAU,sBAAf,SACE,mCACGtB,EACC,qBAAKsB,UAAU,iBACbpB,GACiB,mBAAlBA,EAAQW,OACW,cAAlBX,EAAQW,MAgCRX,GAA6B,SAAlBA,EAAQW,MACrB,oBAAIS,UAAU,UAAd,SACGpB,EAAQa,MAAMC,KAAI,SAACD,EAAOM,GAAR,OACjB,qBAAIC,UAAU,SAAd,UACE,qBAAKA,UAAU,OAAf,SACE,+BAAOP,EAAMQ,gBAEf,wBAAQD,UAAU,cAAcE,QAAS,kBAAM1B,KAA/C,mBAJ0BuB,QAWhCnB,GAAWA,EAAQa,MA7CnB,sBAAKO,UAAU,eAAf,UACE,sBAAKA,UAAU,eAAf,UACGd,GACCA,EAAKiB,QACLjB,EAAKQ,KAAI,SAACU,EAAKL,GAAN,OACP,sBAAMC,UAAU,cAAhB,SACE,qBACEI,IAAKA,EACLF,QAAS,kBAAML,EAAgBE,IAC/BM,IAAI,OACJC,OAAO,SALwBP,MAStCf,GACC,cAAC,IAAD,CACEoB,IAAKlB,EACLqB,aAAczB,EACd0B,QA/BS,WACvBzB,EAAgB,GAChBE,GAAgB,IA8BFwB,eAAe,EACfC,gBAAiB,CACfC,gBAAiB,mBAEnBC,qBAAqB,OAI3B,wBAAQZ,UAAU,YAAYE,QAAS,kBAAML,EAAgB,IAA7D,SACE,qBAAKO,IAAKS,EAAYR,IAAI,yBC5EzB,SAASS,EAAT,GAAgC,IAATC,EAAQ,EAARA,KACpC,OAAO,qBAAKf,UAAU,uBAAf,SAAuCe,ICHjC,UAA0B,qCCA1B,MAA0B,sCCI1B,SAASC,EAAT,GAAiC,IAAbC,EAAY,EAAZA,SAC3BC,EAAKC,iBAAO,MAIlB,OAHA/B,qBAAU,WACR8B,EAAGE,QAAQC,eAAe,CAAEC,MAAO,MAAOC,SAAU,cAGpD,sBAAKvB,UAAU,WAAf,UACE,sBAAMA,UAAU,WAAhB,SACE,qBAAKI,IAAKoB,EAASnB,IAAI,oBAEzB,sBAAKL,UAAU,eAAf,UACGiB,EACD,qBAAKQ,GAAI,KAAMC,IAAKR,OAEtB,sBAAMlB,UAAU,YAAhB,SACE,qBAAKI,IAAKuB,EAAUtB,IAAI,mBCnBjB,UAA0B,qCCA1B,MAA0B,wC,gBCWnCuB,GAVe,WAAD,4BAAE,WAAOhD,GAAP,SAAAS,EAAA,+EACX,IAAIwC,SAAQ,SAAUC,EAASC,GACpCC,YAAW,WACT,IAAMvC,EAAQmC,EAAchD,GAC5BkD,EAAQrC,KACP,SALa,2CAAD,GAUC,SAACb,GACrB,OACGA,GAAqC,OAA1BA,EAAQqD,eACM,UAA1BrD,EAAQqD,cAED,uBACO,SAAZrD,EAA2B,qBACf,6BAAZA,EACK,CACLsD,KAAM,QACNC,QAAQ,GAEA,+BAGDC,EAAgB,uCAAG,WAAOC,GAAP,iBAAAhD,EAAA,+EAEViD,MAAM,2CAA4C,CAClEC,OAAQ,OACRC,KAAM,UACNC,KAAMC,KAAKC,UAAU,CACnBC,MAAO,CACL,CACEC,aAAcR,MAIpBS,QAAS,CAAE,eAAgB,sBAZD,cAEtBC,EAFsB,gBAcTA,EAAIC,OAdK,cActBC,EAdsB,yBAerBA,GAfqB,kCAiB5BC,QAAQC,IAAI,QAAZ,MAjB4B,0DAAH,sDAqBhBC,EAAc,uCAAG,WAAOrC,GAAP,mBAAA1B,EAAA,+EAERiD,MAAM,gCAAiC,CACvDC,OAAQ,OACRC,KAAM,UACNC,KAAMC,KAAKC,UAAU,CACnB/D,QAASmC,IAEX+B,QAAS,CAAE,eAAgB,sBARH,cAEpBC,EAFoB,gBAUPA,EAAIC,OAVG,UAUpBC,EAVoB,OAWtBI,EAAgB,CAAE5D,MAAO,KAAMF,MAAO,MACtC0D,GAAQA,EAAKrE,SAAWqE,EAAKrE,QAAQ0E,UAAYL,EAAKrE,QAAQsD,MAZxC,wBAaxBmB,EAAc5D,MACsB,SAAlCwD,EAAKrE,QAAQsD,KAAKjC,YACdgD,EAAKrE,QAAQ0E,SAASC,UAAUC,OAChCP,EAAKrE,QAAQ0E,SAASrD,YAC5BoD,EAAc9D,MAAQ0D,EAAKrE,QAAQsD,KAAKjC,YAjBhB,kBAkBjBoD,GAlBiB,QAoBxBA,EAAc9D,MAAQ,OACtB8D,EAAc5D,MACZ,qDAtBsB,0DAyB1ByD,QAAQC,IAAI,QAAZ,MAzB0B,0DAAH,sDCmEZM,EA5GD,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACf,EAAwBjF,mBAAS,IAAjC,mBAAOsC,EAAP,KAAa4C,EAAb,KACA,EAA6BlF,mBAAS,IAA7BmF,EAAT,oBACA,EAA0DnF,oBAAS,GAAnE,mBAAOoF,EAAP,KAA8BC,EAA9B,KACA,EAA4DrF,oBAAS,GAArE,mBAAOsF,EAAP,KAA+BC,EAA/B,KACMC,EAAc9C,mBAcd+C,EAAW,uCAAG,4BAAA7E,EAAA,+EAEU8E,UAAUC,aAAaC,aAAa,CAC5DC,OAAO,EACP1B,OAAO,IAJO,OAEV2B,EAFU,OAMhBN,EAAY7C,QAAU,IAAIoD,IAAUD,EAAa,CAC/CrC,KAAM,QACNuC,aAAcC,sBACdC,WAAY,IACZC,gBAAiB,IACjBC,cAAe,MACfC,sBAAuB,EACvBC,aAAa,IAEfd,EAAY7C,QAAQ4D,iBAfJ,gDAiBhB9B,QAAQC,KAAK,KAAO,UAjBJ,yDAAH,qDAqCX8B,EAAe,SAACC,GACpB,OAAO,IAAIrD,SAAQ,SAACC,EAASqD,GAC3B,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,UAAY,kBAAMxD,EAAQsD,EAAOG,SACxCH,EAAOI,cAAcN,OAInBO,EAAY,uCAAG,WAAOP,GAAP,mBAAA7F,EAAA,sEACE4F,EAAaC,GADf,cACbQ,EADa,OAEbC,EAAgBD,EAAOE,MAAM,KAAK,GAFrB,kBAIExD,EAAiBuD,GAJnB,QAIX1C,EAJW,SAKLA,EAAK4C,QAAU5C,EAAK4C,OAAO1F,QACrCwD,EAAQV,EAAK4C,OAAO,GAAGC,QANR,kDASjB5C,QAAQC,IAAI,QAAZ,MATiB,0DAAH,sDAalB,OACE,qCACE,sBAAMnD,UAAU,aAAa+F,SApEd,SAACC,GAClBA,EAAEC,iBACElF,GAAQA,EAAKZ,SACfuD,EAAO3C,GACP4C,EAAQ,MAgER,SACE,uBACE3D,UAAU,aACVkC,KAAK,OACLgE,SA5EkB,SAACF,GACzBrC,EAAQqC,EAAEG,OAAO1G,QA4EXA,MAAOsB,EACPqF,YAAY,mBAKfrC,GACC,wBAAQ/D,UAAU,uBAAuBE,QAnDpB,WACzB4D,GAAyB,GACzBE,GAA0B,GAC1BE,KAgDI,SACE,qBAAK9D,IAAKiG,EAAgBhG,IAAI,WAAWC,OAAO,SAGnDuD,GACC,sBAAK7D,UAAU,0CAAf,UACE,qBAAKA,UAAU,UACf,qBAAKA,UAAU,YACf,wBAAQA,UAAU,uBAAuBE,QArDzB,WACtB4D,GAAyB,GACzBE,GAA0B,GAC1BC,EAAY7C,QAAQkF,eAAc,WAChC,IAAMC,EAAWC,IAAIC,gBAAgBxC,EAAY7C,QAAQsF,WACzD9C,EAAiB2C,GACjBd,EAAaxB,EAAY7C,QAAQsF,eA+C7B,SACE,qBAAKtG,IAAKuG,EAAetG,IAAI,WAAWC,OAAO,gBC1G5C,MAA0B,sCCG1B,SAASsG,EAAT,GAA4B,IAAVC,EAAS,EAATA,MAC/B,OACE,yBAAQ7G,UAAU,SAAlB,UACE,oBAAIA,UAAU,OAAd,sBACA,qBAAKA,UAAU,eAAf,SAEE,sBAAKA,UAAU,OAAf,UACE,qBAAKI,IAAK0G,EAAUzG,IAAI,SACvBwG,EAAQ,sBAAM7G,UAAU,QAAhB,SAAyB6G,IAAgB,aCF5D,IA0CeE,EA1CC,WACd,MAAgCtI,mBAAS,IAAzC,mBAAOwC,EAAP,KAAiB+F,EAAjB,KACA,EAAkCvI,mBAAS,GAA3C,mBAAOwI,EAAP,KAAkBC,EAAlB,KAEA9H,qBAAU,WAAM,4CACd,sBAAAC,EAAA,sDACE2H,EAAY,CACV,cAAC1I,EAAD,CAEEC,aAAY,sBAAE,sBAAAc,EAAA,sEAAkB+D,EAAe,MAAjC,oFADV,OAHV,4CADc,uBAAC,WAAD,wBASd+D,KACC,IAEH,IAAMC,EAAa,uCAAG,WAAOrG,GAAP,eAAA1B,EAAA,sDACdgI,EAAcpG,EAASqG,OAC3B,cAACxG,EAAD,CAAuCC,KAAMA,GAA3BE,EAASd,OAAS,GACpC,cAAC7B,EAAD,CAEEC,aAAY,sBAAE,sBAAAc,EAAA,sEAAkB+D,EAAerC,GAAjC,mFACdvC,YAAa,kBAAM0I,GAAa,SAACD,GAAD,OAAeA,EAAY,OAFtDhG,EAASd,OAAS,IAK3B6G,EAAYK,GATQ,2CAAH,sDAYnB,OACE,qCACE,cAACT,EAAD,CAAQC,MAAOI,IACf,uBAAMjH,UAAU,UAAhB,UACE,cAACgB,EAAD,CAAUC,SAAUA,IACpB,qBAAKjB,UAAU,QACf,qBAAKA,UAAU,aAAf,SACE,cAAC,EAAD,CAAO0D,OAAQ0D,aCjCVG,EARH,WACV,OACE,qBAAKvH,UAAU,MAAf,SACE,cAAC,EAAD,OCMSwH,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.442c29b3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/expand.49d5aa33.svg\";","import React, { useState, useEffect, useCallback } from \"react\";\n\nimport expandIcon from \"../images/expand.svg\";\nimport ImageViewer from \"react-simple-image-viewer\";\n\nexport default function BotMessage({ fetchMessage, onAddtoCart = () => {} }) {\n  const [isLoading, setLoading] = useState(true);\n  const [message, setMessage] = useState();\n  const [currentImage, setCurrentImage] = useState(0);\n  const [isViewerOpen, setIsViewerOpen] = useState(false);\n\n  const [menu, setMenu] = useState();\n\n  useEffect(() => {\n    async function loadMessage() {\n      const msg = await fetchMessage();\n      setLoading(false);\n      if (\n        msg &&\n        (msg.label === \"IMAGE_URL_LIST\" || msg.label === \"IMAGE_URL\")\n      ) {\n        const arr = [];\n        [msg.value].map((value) => arr.push(value));\n        setMessage(msg);\n        setMenu(arr);\n      } else {\n        setMessage(msg);\n      }\n    }\n    loadMessage();\n  }, [fetchMessage]);\n\n  const openImageViewer = useCallback((index) => {\n    setCurrentImage(index);\n    setIsViewerOpen(true);\n  }, []);\n\n  const closeImageViewer = () => {\n    setCurrentImage(0);\n    setIsViewerOpen(false);\n  };\n\n  return (\n    <div className=\"message bot-message\">\n      <>\n        {isLoading ? (\n          <div className=\"dot-elastic\"></div>\n        ) : message &&\n          (message.label === \"IMAGE_URL_LIST\" ||\n            message.label === \"IMAGE_URL\") ? (\n          <div className=\"menu-wrapper\">\n            <div className=\"menu-options\">\n              {menu &&\n                menu.length &&\n                menu.map((src, index) => (\n                  <span className=\"menu-option\" key={index}>\n                    <img\n                      src={src}\n                      onClick={() => openImageViewer(index)}\n                      alt=\"Menu\"\n                      height=\"200\"\n                    />\n                  </span>\n                ))}\n              {isViewerOpen && (\n                <ImageViewer\n                  src={menu}\n                  currentIndex={currentImage}\n                  onClose={closeImageViewer}\n                  disableScroll={false}\n                  backgroundStyle={{\n                    backgroundColor: \"rgba(0,0,0,0.9)\",\n                  }}\n                  closeOnClickOutside={true}\n                />\n              )}\n            </div>\n            <button className=\"expandBtn\" onClick={() => openImageViewer(0)}>\n              <img src={expandIcon} alt=\"Expand Icon\" />\n            </button>\n          </div>\n        ) : message && message.label === \"LIST\" ? (\n          <ul className=\"options\">\n            {message.value.map((value, index) => (\n              <li className=\"option\" key={index}>\n                <div className=\"item\">\n                  <span>{value.stringValue}</span>\n                </div>\n                <button className=\"btn addtBtn\" onClick={() => onAddtoCart()}>\n                  Add\n                </button>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          message && message.value\n        )}\n      </>\n    </div>\n  );\n}\n\n/* <div className=\"message bot-message\">\nHere is a list of 3 Dominos near to your location\n<ul className=\"locations\">\n  <li className=\"location\">\n    <a href=\"#\">Dominos address location 1 address Line 1</a>\n  </li>\n  <li className=\"location\">\n    <a href=\"#\">Dominos address location 2 address Line 2</a>\n  </li>\n  <li className=\"location\">\n    <a href=\"#\">Dominos address location 3 address Line 3</a>\n  </li>\n</ul>\n</div>\n*/\n","import React from \"react\";\n\nexport default function UserMessage({ text }) {\n  return <div className=\"message user-message\">{text}</div>;\n}\n","export default __webpack_public_path__ + \"static/media/bot-icon.795fa940.svg\";","export default __webpack_public_path__ + \"static/media/user-icon.20ebf0b4.svg\";","import React, { useEffect, useRef } from \"react\";\nimport botIcon from \"../images/bot-icon.svg\";\nimport userIcon from \"../images/user-icon.svg\";\n\nexport default function Messages({ messages }) {\n  const el = useRef(null);\n  useEffect(() => {\n    el.current.scrollIntoView({ block: \"end\", behavior: \"smooth\" });\n  });\n  return (\n    <div className=\"chatArea\">\n      <span className=\"bot-icon\">\n        <img src={botIcon} alt=\"Chat Bot Icon\" />\n      </span>\n      <div className=\"chatMessages\">\n        {messages}\n        <div id={\"el\"} ref={el} />\n      </div>\n      <span className=\"user-icon\">\n        <img src={userIcon} alt=\"User Icon\" />\n      </span>\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/mic-icon.74710990.svg\";","export default __webpack_public_path__ + \"static/media/default_mic.5ed071ef.svg\";","const chatService = {\n  getChatbotResponse: async (message) => {\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        const value = handleRequest(message);\n        resolve(value);\n      }, 2000);\n    });\n  },\n};\n\nconst handleRequest = (message) => {\n  if (\n    (message && message.toLowerCase() === \"hi\") ||\n    message.toLowerCase() === \"hello\"\n  )\n    return \"Welcome to Pizzazza!\";\n  if (message === \"help\") return \"How may i help you\";\n  if (message === \"Show me the dominos menu\")\n    return {\n      type: \"image\",\n      isMenu: true,\n    };\n  else return \"Sorry! I didn't understand\";\n};\n\nexport const getTextFromAudio = async (audioString) => {\n  try {\n    const res = await fetch(\"https://inference.vakyansh.in/alt/asr/en\", {\n      method: \"POST\",\n      cors: \"no-cors\",\n      body: JSON.stringify({\n        audio: [\n          {\n            audioContent: audioString,\n          },\n        ],\n      }),\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n    const data = await res.json();\n    return data;\n  } catch (error) {\n    console.log(\"Error\", error);\n  }\n};\n\nexport const getBotResponse = async (text) => {\n  try {\n    const res = await fetch(\"http://localhost:3000/chatbot\", {\n      method: \"POST\",\n      cors: \"no-cors\",\n      body: JSON.stringify({\n        message: text,\n      }),\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n    const data = await res.json();\n    let finalResponse = { value: null, label: \"\" };\n    if (data && data.message && data.message.response && data.message.type) {\n      finalResponse.value =\n        data.message.type.stringValue === \"LIST\"\n          ? data.message.response.listValue.values\n          : data.message.response.stringValue;\n      finalResponse.label = data.message.type.stringValue;\n      return finalResponse;\n    } else {\n      finalResponse.label = \"TEXT\";\n      finalResponse.value =\n        \"Sorry Artisan! I didn't get you. Could you repeat?\";\n    }\n  } catch (error) {\n    console.log(\"Error\", error);\n  }\n};\n\nexport default chatService;\n","import React, { useState, useRef } from \"react\";\nimport activeMicIcon from \"../images/mic-icon.svg\";\nimport defaultMicIcon from \"../images/default_mic.svg\";\nimport RecordRTC, { StereoAudioRecorder } from \"recordrtc\";\nimport { getTextFromAudio } from \"../api/chatService\";\n\nconst Input = ({ onSend }) => {\n  const [text, setText] = useState(\"\");\n  const [, setRecordedAudio] = useState(\"\");\n  const [showStopRecordingIcon, setShowStopRecordingIcon] = useState(false);\n  const [showStartRecordingIcon, setShowStartRecordingIcon] = useState(true);\n  const recorderRef = useRef();\n\n  const handleInputChange = (e) => {\n    setText(e.target.value);\n  };\n\n  const handleSend = (e) => {\n    e.preventDefault();\n    if (text && text.length) {\n      onSend(text);\n      setText(\"\");\n    }\n  };\n\n  const recordAudio = async () => {\n    try {\n      const mediaStream = await navigator.mediaDevices.getUserMedia({\n        video: false,\n        audio: true,\n      });\n      recorderRef.current = new RecordRTC(mediaStream, {\n        type: \"audio\",\n        recorderType: StereoAudioRecorder,\n        bufferSize: 256,\n        desiredSampRate: 10000,\n        bitsPerSecond: 128000,\n        numberOfAudioChannels: 1,\n        disableLogs: true,\n      });\n      recorderRef.current.startRecording();\n    } catch (error) {\n      console.log((error, \"Error\"));\n    }\n  };\n\n  const onStartRecordAudio = () => {\n    setShowStopRecordingIcon(true);\n    setShowStartRecordingIcon(false);\n    recordAudio();\n  };\n\n  const onStopRecording = () => {\n    setShowStopRecordingIcon(false);\n    setShowStartRecordingIcon(true);\n    recorderRef.current.stopRecording(() => {\n      const audioURL = URL.createObjectURL(recorderRef.current.getBlob());\n      setRecordedAudio(audioURL);\n      getAudioText(recorderRef.current.getBlob());\n    });\n  };\n\n  const blobToBase64 = (blob) => {\n    return new Promise((resolve, _) => {\n      const reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.readAsDataURL(blob);\n    });\n  };\n\n  const getAudioText = async (blob) => {\n    const base64 = await blobToBase64(blob);\n    const splittedValue = base64.split(\",\")[1];\n    try {\n      const data = await getTextFromAudio(splittedValue);\n      if (data && data.output && data.output.length) {\n        setText(data.output[0].source);\n      }\n    } catch (error) {\n      console.log(\"Error\", error);\n    }\n  };\n\n  return (\n    <>\n      <form className=\"input-form\" onSubmit={handleSend}>\n        <input\n          className=\"user-input\"\n          type=\"text\"\n          onChange={handleInputChange}\n          value={text}\n          placeholder=\"Type Message\"\n        />\n        {/* <iframe src={recordedAudio} allow=\"autoplay\" title=\"audio\"></iframe> */}\n      </form>\n\n      {showStartRecordingIcon && (\n        <button className=\"speak cursor-pointer\" onClick={onStartRecordAudio}>\n          <img src={defaultMicIcon} alt=\"Mic Icon\" height=\"30\" />\n        </button>\n      )}\n      {showStopRecordingIcon && (\n        <div className=\"recorder-container ml-auto align-middle\">\n          <div className=\"outer\"></div>\n          <div className=\"outer-2\"></div>\n          <button className=\"speak cursor-pointer\" onClick={onStopRecording}>\n            <img src={activeMicIcon} alt=\"Mic Icon\" height=\"30\" />\n          </button>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Input;\n","export default __webpack_public_path__ + \"static/media/cart-icon.dc4fcdb7.svg\";","import React from \"react\";\nimport cartIcon from \"../images/cart-icon.svg\";\n\nexport default function Header({ count }) {\n  return (\n    <header className=\"header\">\n      <h1 className=\"logo\">Pizzazza</h1>\n      <div className=\"header-right\">\n        {/* <div className=\"address\">Order for address : Location 2</div> */}\n        <div className=\"cart\">\n          <img src={cartIcon} alt=\"Cart\" />\n          {count ? <span className=\"count\">{count}</span> : null}\n        </div>\n      </div>\n    </header>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport BotMessage from \"../components/BotMessage\";\nimport UserMessage from \"../components/UserMessage\";\nimport Messages from \"../components/Messages\";\nimport Input from \"../components/Input\";\n\nimport Header from \"../components/Header\";\nimport { getBotResponse } from \"../api/chatService\";\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([]);\n  const [cartCount, setCartCount] = useState(0);\n\n  useEffect(() => {\n    async function loadWelcomeMessage() {\n      setMessages([\n        <BotMessage\n          key=\"0\"\n          fetchMessage={async () => await getBotResponse(\"hi\")}\n        />,\n      ]);\n    }\n    loadWelcomeMessage();\n  }, []);\n\n  const onSendMessage = async (text) => {\n    const newMessages = messages.concat(\n      <UserMessage key={messages.length + 1} text={text} />,\n      <BotMessage\n        key={messages.length + 2}\n        fetchMessage={async () => await getBotResponse(text)}\n        onAddtoCart={() => setCartCount((cartCount) => cartCount + 1)}\n      />\n    );\n    setMessages(newMessages);\n  };\n\n  return (\n    <>\n      <Header count={cartCount} />\n      <main className=\"wrapper\">\n        <Messages messages={messages} />\n        <div className=\"sep\"></div>\n        <div className=\"chatFooter\">\n          <Input onSend={onSendMessage} />\n        </div>\n      </main>\n    </>\n  );\n};\n\nexport default Chatbot;\n","import \"./App.css\";\nimport Chatbot from \"./chatbot\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Chatbot />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}